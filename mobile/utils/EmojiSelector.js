import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  Dimensions,
} from 'react-native';

const emojiData = {
  smileys: [
    'üòÄ',
    'üòÅ',
    'üòÇ',
    'ü§£',
    'üòÉ',
    'üòÑ',
    'üòÖ',
    'üòÜ',
    'üòâ',
    'üòä',
    'üòã',
    'üòé',
    'üòç',
    'üòò',
    'ü•∞',
    'üòó',
    'üòô',
    'üòö',
    'üôÇ',
    'ü§ó',
    'ü§©',
    'ü§î',
    'ü§®',
    'üòê',
    'üòë',
    'üò∂',
    'üôÑ',
    'üòè',
    'üò£',
    'üò•',
    'üòÆ',
    'ü§ê',
    'üòØ',
    'üò™',
    'üò´',
    'ü•±',
    'üò¥',
    'üòå',
    'üòõ',
    'üòú',
    'üòù',
    'ü§§',
    'üòí',
    'üòì',
    'üòî',
    'üòï',
    'üôÉ',
    'ü§ë',
    'üò≤',
    '‚òπÔ∏è',
  ],
  animals: [
    'üê∂',
    'üê±',
    'üê≠',
    'üêπ',
    'üê∞',
    'ü¶ä',
    'üêª',
    'üêº',
    'üê®',
    'üêØ',
    'ü¶Å',
    'üêÆ',
    'üê∑',
    'üê∏',
    'üêµ',
    'üôà',
    'üôâ',
    'üôä',
    'üêí',
    'üêî',
    'üêß',
    'üê¶',
    'üê§',
    'üê£',
    'üê•',
    'ü¶Ü',
    'ü¶Ö',
    'ü¶â',
    'ü¶á',
    'üê∫',
    'üêó',
    'üê¥',
    'ü¶Ñ',
    'üêù',
    'üêõ',
    'ü¶ã',
    'üêå',
    'üêû',
    'üêú',
    'ü¶ó',
  ],
  foods: [
    'üçè',
    'üçé',
    'üçê',
    'üçä',
    'üçã',
    'üçå',
    'üçâ',
    'üçá',
    'üçì',
    'üçà',
    'üçí',
    'üçë',
    'ü•≠',
    'üçç',
    'ü••',
    'ü•ù',
    'üçÖ',
    'üçÜ',
    'ü•ë',
    'ü•¶',
    'ü•¨',
    'ü•í',
    'üå∂',
    'üåΩ',
    'ü•ï',
    'üßÑ',
    'üßÖ',
    'ü•î',
    'üç†',
    'ü•ê',
    'ü•Ø',
    'üçû',
    'ü•ñ',
    'ü•®',
    'üßÄ',
    'ü•ö',
    'üç≥',
    'üßà',
    'ü•û',
    'üßá',
  ],
  activities: [
    '‚öΩÔ∏è',
    'üèÄ',
    'üèà',
    '‚öæÔ∏è',
    'ü•é',
    'üéæ',
    'üèê',
    'üèâ',
    'ü•è',
    'üé±',
    'ü™Ä',
    'üèì',
    'üè∏',
    'üèí',
    'üèë',
    'ü•ç',
    'üèè',
    'ü•Ö',
    '‚õ≥Ô∏è',
    'ü™Å',
    'üèπ',
    'üé£',
    'ü§ø',
    'ü•ä',
    'ü•ã',
    'üéΩ',
    'üõπ',
    'üõ∑',
    '‚õ∏',
    'ü•å',
    'üéø',
    '‚õ∑',
    'üèÇ',
    'ü™Ç',
    'üèãÔ∏è',
    'ü§º',
    'ü§∏',
    'ü§∫',
    '‚õπÔ∏è',
    'ü§æ',
  ],
  places: [
    'üè†',
    'üè°',
    'üè¢',
    'üè£',
    'üè§',
    'üè•',
    'üè¶',
    'üè®',
    'üè©',
    'üè™',
    'üè´',
    'üè¨',
    'üè≠',
    'üèØ',
    'üè∞',
    'üíí',
    'üóº',
    'üóΩ',
    '‚õ™Ô∏è',
    'üïå',
    'üõï',
    'üïç',
    '‚õ©',
    'üïã',
    '‚õ≤Ô∏è',
    '‚õ∫Ô∏è',
    'üåÅ',
    'üåÉ',
    'üèô',
    'üåÑ',
    'üåÖ',
    'üåÜ',
    'üåá',
    'üåâ',
    'üåå',
    'üé†',
    'üé°',
    'üé¢',
    'üíà',
    'üé™',
  ],
  objects: [
    '‚åöÔ∏è',
    'üì±',
    'üì≤',
    'üíª',
    '‚å®Ô∏è',
    'üñ•',
    'üñ®',
    'üñ±',
    'üñ≤',
    'üïπ',
    'üóú',
    'üíΩ',
    'üíæ',
    'üíø',
    'üìÄ',
    'üìº',
    'üì∑',
    'üì∏',
    'üìπ',
    'üé•',
    'üìΩ',
    'üéû',
    'üìû',
    '‚òéÔ∏è',
    'üìü',
    'üì†',
    'üì∫',
    'üìª',
    'üß≠',
    '‚è±',
    '‚è≤',
    '‚è∞',
    'üï∞',
    '‚åõÔ∏è',
    '‚è≥',
    'üì°',
    'üîã',
    'üîå',
    'üí°',
    'üî¶',
  ],
  symbols: [
    '‚ù§Ô∏è',
    'üß°',
    'üíõ',
    'üíö',
    'üíô',
    'üíú',
    'üñ§',
    'ü§ç',
    'ü§é',
    'üíî',
    '‚ù£Ô∏è',
    'üíï',
    'üíû',
    'üíì',
    'üíó',
    'üíñ',
    'üíò',
    'üíù',
    'üíü',
    '‚òÆÔ∏è',
    '‚úùÔ∏è',
    '‚ò™Ô∏è',
    'üïâ',
    '‚ò∏Ô∏è',
    '‚ú°Ô∏è',
    'üîØ',
    'üïé',
    '‚òØÔ∏è',
    '‚ò¶Ô∏è',
    'üõê',
    '‚õé',
    '‚ôàÔ∏è',
    '‚ôâÔ∏è',
    '‚ôäÔ∏è',
    '‚ôãÔ∏è',
    '‚ôåÔ∏è',
    '‚ôçÔ∏è',
    '‚ôéÔ∏è',
    '‚ôèÔ∏è',
    '‚ôêÔ∏è',
  ],
  flags: [
    'üè≥Ô∏è',
    'üè¥',
    'üè¥‚Äç‚ò†Ô∏è',
    'üèÅ',
    'üö©',
    'üè≥Ô∏è‚Äçüåà',
    'üá¶üá´',
    'üá¶üáΩ',
    'üá¶üá±',
    'üá©üáø',
    'üá¶üá∏',
    'üá¶üá©',
    'üá¶üá¥',
    'üá¶üáÆ',
    'üá¶üá∂',
    'üá¶üá¨',
    'üá¶üá∑',
    'üá¶üá≤',
    'üá¶üáº',
    'üá¶üá∫',
    'üá¶üáπ',
    'üá¶üáø',
    'üáßüá∏',
    'üáßüá≠',
    'üáßüá©',
    'üáßüáß',
    'üáßüáæ',
    'üáßüá™',
    'üáßüáø',
    'üáßüáØ',
    'üáßüá≤',
    'üáßüáπ',
    'üáßüá¥',
    'üáßüá¶',
    'üáßüáº',
    'üáßüá∑',
    'üáªüá≥',
    'üáÆüá©',
    'üáØüáµ',
    'üá∞üá∑',
  ],
};

const categories = [
  { key: 'smileys', title: 'C·∫£m x√∫c' },
  { key: 'animals', title: 'ƒê·ªông v·∫≠t' },
  { key: 'foods', title: 'Th·ª©c ƒÉn' },
  { key: 'activities', title: 'Ho·∫°t ƒë·ªông' },
  { key: 'places', title: 'ƒê·ªãa ƒëi·ªÉm' },
  { key: 'objects', title: 'ƒê·ªì v·∫≠t' },
  { key: 'symbols', title: 'Bi·ªÉu t∆∞·ª£ng' },
  { key: 'flags', title: 'C·ªù' },
];

const EmojiSelector = ({
  onEmojiSelected,
  columns = 6,
  showSearchBar = true,
  showTabs = true,
  showHistory = true,
  placeholder = 'T√¨m ki·∫øm emoji...',
}) => {
  const [selectedCategory, setSelectedCategory] = useState('smileys');
  const [searchQuery, setSearchQuery] = useState('');
  const [emojiHistory, setEmojiHistory] = useState([]);
  const [filteredEmojis, setFilteredEmojis] = useState([]);

  const { width } = Dimensions.get('window');

  const itemSize = width / columns;

  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredEmojis(emojiData[selectedCategory]);
    } else {
      const results = [];
      Object.values(emojiData).forEach((categoryEmojis) => {
        categoryEmojis.forEach((emoji) => {
          if (emoji.includes(searchQuery)) {
            results.push(emoji);
          }
        });
      });
      setFilteredEmojis(results);
    }
  }, [searchQuery, selectedCategory]);

  const handleEmojiPress = (emoji) => {
    onEmojiSelected(emoji);

    if (showHistory) {
      const updatedHistory = [
        emoji,
        ...emojiHistory.filter((e) => e !== emoji),
      ].slice(0, 20);
      setEmojiHistory(updatedHistory);
    }
  };

  const renderEmojiItem = ({ item }) => (
    <TouchableOpacity
      style={[styles.emojiButton, { width: itemSize, height: itemSize }]}
      onPress={() => handleEmojiPress(item)}
    >
      <Text style={styles.emoji}>{item}</Text>
    </TouchableOpacity>
  );

  const renderCategoryTab = ({ item }) => (
    <TouchableOpacity
      style={[
        styles.categoryTab,
        selectedCategory === item.key && styles.selectedCategoryTab,
      ]}
      onPress={() => {
        setSelectedCategory(item.key);
        setSearchQuery('');
      }}
    >
      <Text style={styles.categoryTabText}>{item.title}</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      {showSearchBar && (
        <View style={styles.searchContainer}>
          <TextInput
            style={styles.searchInput}
            placeholder={placeholder}
            value={searchQuery}
            onChangeText={setSearchQuery}
          />
        </View>
      )}

      {showHistory && emojiHistory.length > 0 && (
        <View style={styles.historyContainer}>
          <Text style={styles.historyTitle}>ƒê√£ d√πng g·∫ßn ƒë√¢y</Text>
          <FlatList
            data={emojiHistory}
            renderItem={renderEmojiItem}
            keyExtractor={(item, index) => `history-${index}`}
            horizontal
            showsHorizontalScrollIndicator={false}
          />
        </View>
      )}

      {showTabs && (
        <FlatList
          data={categories}
          renderItem={renderCategoryTab}
          keyExtractor={(item) => item.key}
          horizontal
          showsHorizontalScrollIndicator={false}
          style={styles.categoriesContainer}
        />
      )}

      <FlatList
        data={filteredEmojis}
        renderItem={renderEmojiItem}
        keyExtractor={(item, index) => `emoji-${index}`}
        numColumns={columns}
        showsVerticalScrollIndicator={true}
        style={styles.emojiContainer}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  searchContainer: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ECECEC',
  },
  searchInput: {
    height: 40,
    borderWidth: 1,
    borderColor: '#ECECEC',
    borderRadius: 10,
    paddingHorizontal: 10,
    backgroundColor: '#F5F5F5',
  },
  historyContainer: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ECECEC',
  },
  historyTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#666',
  },
  categoriesContainer: {
    maxHeight: 50,
    borderBottomWidth: 1,
    borderBottomColor: '#ECECEC',
  },
  categoryTab: {
    paddingHorizontal: 15,
    paddingVertical: 10,
    justifyContent: 'center',
    alignItems: 'center',
  },
  selectedCategoryTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#007AFF',
  },
  categoryTabText: {
    color: '#333',
    fontSize: 14,
  },
  emojiContainer: {
    flex: 1,
  },
  emojiButton: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  emoji: {
    fontSize: 24,
  },
});

export default EmojiSelector;
