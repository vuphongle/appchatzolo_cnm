package vn.edu.iuh.fit.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.web.bind.annotation.*;
import vn.edu.iuh.fit.model.Message;
import vn.edu.iuh.fit.service.MessageService;
import vn.edu.iuh.fit.service.impl.MessageServiceImpl;

import java.util.List;

@RestController
@RequestMapping("/messages")
public class MessageController {

    private final MessageService service;
    private final MessageServiceImpl messageServiceImpl;


    @Autowired
    public MessageController(MessageService service, MessageServiceImpl messageServiceImpl) {
        this.service = service;
        this.messageServiceImpl = messageServiceImpl;
    }

    //G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
    @PostMapping("/addFriend")
    public void sendMessage(@RequestBody Message message) {
        System.out.println("Received message: " + message);
        service.sendMessage(message);
    }

    //T√¨m danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n
    @GetMapping("/invitations/received/{receiverId}")
    public ResponseEntity<List<Message>> getReceivedInvitations(@PathVariable String receiverId) {
        List<Message> invitations = service.getInvitationsByReceiverId(receiverId);
        return ResponseEntity.ok(invitations);
    }

    //T√¨m danh s√°ch c√°c l·ªùi m·ªùi ƒë√£ g·ª≠i ƒëi
    @GetMapping("/invitations/sent/{senderId}")
    public ResponseEntity<List<Message>> getSentInvitations(@PathVariable String senderId) {
        List<Message> sentInvitations = service.getSentInvitationsBySenderId(senderId);
        return ResponseEntity.ok(sentInvitations);
    }

    // X√≥a l·ªùi m·ªùi k·∫øt b·∫°n (thu h·ªìi ho·∫∑c t·ª´ ch·ªëi)
    @DeleteMapping("/invitations/{senderId}/{receiverId}")
    public ResponseEntity<String> deleteInvitation(@PathVariable String senderId, @PathVariable String receiverId) {
        service.deleteInvitation(senderId, receiverId);
        return ResponseEntity.ok("L·ªùi m·ªùi ƒë√£ b·ªã x√≥a th√†nh c√¥ng.");
    }

    // X·ª≠ l√Ω ƒë·ªìng √Ω k·∫øt b·∫°n
    @PostMapping("/acceptFriendRequest/{senderId}/{receiverId}")
    public ResponseEntity<String> acceptFriendRequest(
            @PathVariable String senderId,
            @PathVariable String receiverId) {
        try {
            // G·ªçi service ƒë·ªÉ ƒë·ªìng √Ω k·∫øt b·∫°n
            boolean isAccepted = service.acceptFriendRequest(senderId, receiverId);

            if (isAccepted) {
                return ResponseEntity.ok("L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n!");
            } else {
                return ResponseEntity.status(400).body("L·ªói khi ƒë·ªìng √Ω k·∫øt b·∫°n!");
            }
        } catch (Exception e) {
            return ResponseEntity.status(500).body("C√≥ l·ªói x·∫£y ra: " + e.getMessage());
        }
    }

// l·∫•y l·ªãch s·ª≠ tin nh·∫Øn gi·ªØa hai ng∆∞·ªùi.
    @GetMapping("/messages")
    public ResponseEntity<List<Message>> getMessages(
            @RequestParam String senderID,
            @RequestParam String receiverID) {
        List<Message> messages = service.getMessagesBetweenUsers(senderID, receiverID);
        return ResponseEntity.ok(messages);
    }

    //tr·∫°ng th√°i ƒë√£ xem / ch∆∞a xem message
    @GetMapping("/messages/unread/{receiverID}/{senderID}")
    public ResponseEntity<List<Message>> getUnreadMessages(@PathVariable String receiverID, @PathVariable String senderID) {
        List<Message> unreadMessages = service.findUnreadMessages(receiverID, senderID);
        return ResponseEntity.ok(unreadMessages);
    }
    // tr·∫°ng th√°i ƒë·ªçc tin nh·∫Øn
    @PutMapping("/messages/read/{receiverID}/{senderID}")
    public ResponseEntity<?> markMessagesAsRead(@PathVariable String receiverID, @PathVariable String senderID) {
        List<Message> messages = service.getMessagesBetweenUsers(receiverID, senderID);

        for (Message message : messages) {
            message.setIsRead(true); // ƒê√°nh d·∫•u l√† ƒë√£ ƒë·ªçc
        }

        service.saveReadMess(messages); // üîπ L∆∞u tr·∫°ng th√°i v√†o DB

        return ResponseEntity.ok("Messages marked as read");
    }
    // tin nhƒÉn m·ªõi nh·∫•t
    @GetMapping("/latest-message")
    public ResponseEntity<Message> getLatestMessage(
            @RequestParam String senderID,
            @RequestParam String receiverID) {
        Message latestMessage = service.getLatestMessageBetweenUsers(senderID, receiverID);
        return latestMessage != null ? ResponseEntity.ok(latestMessage) : ResponseEntity.noContent().build();
    }


}
