import React, { useState } from 'react';
import ApiService from '../services/AuthService';
import { useNavigate } from 'react-router-dom';
import { te } from 'date-fns/locale';

const ForgotPasswordPage = () => {
    const navigate = useNavigate();
    const [phoneNumber, setPhoneNumber] = useState('');
    const [otp, setOtp] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [confirmNewPassword, setConfirmNewPassword] = useState(''); // √î nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi
    const [errorMessage, setErrorMessage] = useState('');
    const [step, setStep] = useState(1);  // B∆∞·ªõc 1: Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i, B∆∞·ªõc 2: Nh·∫≠p OTP, B∆∞·ªõc 3: ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi
    const [isProcessing, setIsProcessing] = useState(false);

    // G·ª≠i m√£ OTP
    const handleSendOtp = async () => {
        setIsProcessing(true);
        try {
            const response = await ApiService.post('/forgot-password/send-otp', { phoneNumber });
            setStep(2);  // Chuy·ªÉn sang b∆∞·ªõc x√°c minh OTP
            setIsProcessing(false);
        } catch (error) {
            setErrorMessage('L·ªói g·ª≠i m√£ OTP, vui l√≤ng th·ª≠ l·∫°i!');
            setIsProcessing(false);
        }
    };

    // X√°c minh OTP v√† chuy·ªÉn sang nh·∫≠p m·∫≠t kh·∫©u m·ªõi
    const handleVerifyOtp = async () => {
        setIsProcessing(true);
        try {
            const response = await ApiService.post('/forgot-password/verify-otp', { phoneNumber, otp });
            setStep(3);  // Chuy·ªÉn sang b∆∞·ªõc nh·∫≠p m·∫≠t kh·∫©u m·ªõi
            setIsProcessing(false);
        } catch (error) {
            setErrorMessage('M√£ OTP kh√¥ng ƒë√∫ng ho·∫∑c h·∫øt h·∫°n!!');
            setIsProcessing(false);
        }
    };

    const validatePassword = (pass) => {
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
        return passwordRegex.test(pass);
    };

    // ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi
    const handleResetPassword = async () => {
        setIsProcessing(true);

        // Ki·ªÉm tra xem m·∫≠t kh·∫©u m·ªõi v√† m·∫≠t kh·∫©u nh·∫≠p l·∫°i c√≥ tr√πng kh√¥ng
        if (newPassword !== confirmNewPassword) {
            setErrorMessage('M·∫≠t kh·∫©u m·ªõi v√† m·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!');
            setIsProcessing(false);
            return;
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng m·∫≠t kh·∫©u m·ªõi
        if (!validatePassword(newPassword)) {
            setErrorMessage('M·∫≠t kh·∫©u m·ªõi ph·∫£i bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát!');
            setIsProcessing(false);
            return;
        }

        try {
            const response = await ApiService.post('/forgot-password/reset-password', { phoneNumber, newPassword });
            setIsProcessing(false);
            navigate('/login');  // ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
        } catch (error) {
            setErrorMessage('C√≥ l·ªói khi thay ƒë·ªïi m·∫≠t kh·∫©u!');
            setIsProcessing(false);
        }
    };

    return (
        <div className="flex justify-center items-center min-h-screen bg-gray-100 p-4 m-4" style={{ textAlign: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column' }}>
            <div className="w-full max-w-md bg-white p-8 rounded-lg shadow-lg p-2" style={{ width: '400px', borderRadius: '10px' }}>
                <h2 className="text-2xl font-semibold text-center mb-6">Qu√™n M·∫≠t Kh·∫©u</h2>

                {step === 1 && (
                    <div>
                        <div className="mb-4">
                            {errorMessage && <div className="text-red-500 text-sm mb-2">{errorMessage}</div>}
                            <input
                                type="text"
                                placeholder="üì± Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                value={phoneNumber}
                                onChange={(e) => setPhoneNumber(e.target.value)}
                                className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
                                required
                            />
                        </div>
                        <button
                            onClick={handleSendOtp}
                            className="w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 mb-4"
                            style={{ width: '150px', padding: '10px', cursor: 'pointer' }}
                            disabled={isProcessing}
                        >
                            {isProcessing ? 'ƒêang x·ª≠ l√Ω...' : 'G·ª≠i M√£ OTP'}
                        </button>
                    </div>
                )}

                {step === 2 && (
                    <div>
                        <div className="mb-4">
                            {errorMessage && <div className="text-red-500 text-sm mb-2">{errorMessage}</div>}
                            <input
                                type="text"
                                placeholder="üì± Nh·∫≠p m√£ OTP"
                                value={otp}
                                onChange={(e) => setOtp(e.target.value)}
                                className="w-full p-3 mb-4 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
                                required
                            />
                        </div>
                        <button
                            onClick={handleVerifyOtp}
                            className="w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600"
                            style={{ width: '150px', padding: '10px', cursor: 'pointer' }}
                            disabled={isProcessing}
                        >
                            {isProcessing ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c Minh OTP'}
                        </button>
                    </div>
                )}

                {step === 3 && (
                    <div>
                        <div className="mb-4">
                            {errorMessage && <div className="text-red-500 text-sm mb-2">{errorMessage}</div>}
                            <input
                                type="password"
                                placeholder="üîí Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                                value={newPassword}
                                onChange={(e) => setNewPassword(e.target.value)}
                                className="w-full p-3 mb-4 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
                                required
                            />
                        </div>
                        <div className="mb-4">
                            <input
                                type="password"
                                placeholder="üîí Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                                value={confirmNewPassword}
                                onChange={(e) => setConfirmNewPassword(e.target.value)}
                                className="w-full p-3 mb-4 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
                                required
                            />
                        </div>
                        <button
                            onClick={handleResetPassword}
                            className="w-auto bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600"
                            style={{ width: '150px', padding: '10px', cursor: 'pointer' }}
                            disabled={isProcessing}
                        >
                            {isProcessing ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c Nh·∫≠n M·∫≠t Kh·∫©u M·ªõi'}
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default ForgotPasswordPage;
