import React, { useState, useEffect } from "react";
import "./MainPage.css"; // CSS ri√™ng cho giao di·ªán
import UserService from "../services/UserService";
import MessageService from "../services/MessageService";
import flag from "../image/icon_VN.png";
import avatar_default from '../image/avatar_user.jpg';
import { useAuth } from "../context/AuthContext"; // Import custom hook ƒë·ªÉ s·ª≠ d·ª•ng context
import ContactsTab from "./ContactsTab";

// D·ªØ li·ªáu danh s√°ch tin nh·∫Øn
const messages = [
    {
        id: 1,
        groupName: "IUH - DHKTPM17A - CT7",
        unreadCount: 86,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
    {
        id: 2,
        groupName: "Team ·ªîn CN M·ªõi",
        unreadCount: 6,
        img: "https://cdn.idntimes.com/content-images/community/2024/04/img-4316-f6d361070de3766c8e441e12129828b1-3d6a4e7ff5fede70fceb066160f52e37.jpeg",
    },
    {
        id: 3,
        groupName: "Team ·ªîn",
        unreadCount: 0,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
    {
        id: 4,
        groupName: "Nh√≥m 4 PTUD JAVA",
        unreadCount: 0,
        img: "https://cdn.idntimes.com/content-images/community/2024/04/img-4316-f6d361070de3766c8e441e12129828b1-3d6a4e7ff5fede70fceb066160f52e37.jpeg",
    },
    {
        id: 5,
        groupName: "Cloud c·ªßa t√¥i",
        unreadCount: 0,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
    {
        id: 6,
        groupName: "Cloud c·ªßa t√¥i",
        unreadCount: 0,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
    {
        id: 7,
        groupName: "Cloud c·ªßa t√¥i",
        unreadCount: 0,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
    {
        id: 8,
        groupName: "Cloud c·ªßa t√¥i",
        unreadCount: 0,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
    {
        id: 9,
        groupName: "Cloud c·ªßa t√¥i",
        unreadCount: 0,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
    {
        id: 10,
        groupName: "Cloud c·ªßa t√¥i",
        unreadCount: 0,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
    {
        id: 11,
        groupName: "Cloud c·ªßa t√¥i",
        unreadCount: 0,
        img: "https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg",
    },
];

//th√™m s·ª± ki·ªán onClick ƒë·ªÉ c·∫≠p nh·∫≠t state selectedChat trong MainPage.
const MessageItem = ({ groupName, unreadCount, img, onClick }) => (
    <li className="message-item" onClick={onClick}>
        <img src={img} alt="Avatar" className="avatar" />
        <div className="message-info">
            <h4>{groupName}</h4>
            <p>Ch∆∞a c√≥ tin nh·∫Øn</p>
        </div>
        {unreadCount > 0 && <span className="badge">{unreadCount}</span>}
    </li>
);

// Component ch√≠nh
const MainPage = () => {
    const { MyUser } = useAuth();

    const [activeTab, setActiveTab] = useState("chat"); // State qu·∫£n l√Ω tab
    const [isSettingsOpen, setIsSettingsOpen] = useState(false);

    //ch·ªçn component MessageItem
    const [selectedChat, setSelectedChat] = useState(null);
    const [messageInput, setMessageInput] = useState(""); // N·ªôi dung tin nh·∫Øn nh·∫≠p v√†o
    const [chatMessages, setChatMessages] = useState([]); // Danh s√°ch tin nh·∫Øn c·ªßa chat

    //nh·∫•n enter g·ª≠i tin nh·∫Øn
    const handleSendMessage = (e) => {
        if (e.key === "Enter" && messageInput.trim() !== "") {
            // Th√™m tin nh·∫Øn m·ªõi v√†o danh s√°ch chatMessages
            setChatMessages((prevMessages) => [
                ...prevMessages,
                { id: prevMessages.length + 1, text: messageInput },
            ]);
            setMessageInput(""); // Reset √¥ nh·∫≠p tin nh·∫Øn
        }
    };

    const toggleSettingsMenu = () => {
        setIsSettingsOpen(!isSettingsOpen);
    };

    const [phoneNumber, setPhoneNumber] = useState("");
    const [user, setUser] = useState(null);
    const [error, setError] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isUserInfoModalOpen, setIsUserInfoModalOpen] = useState(false);
    const [loading, setLoading] = useState(false); // Loading state

    const [sentInvitations, setSentInvitations] = useState([]); // Danh s√°ch l·ªùi m·ªùi ƒë√£ g·ª≠i

    // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn k·∫øt b·∫°n
    const [isFriendRequestModalOpen, setIsFriendRequestModalOpen] = useState(false);
    const [messageContent, setMessageContent] = useState(`Xin ch√†o, m√¨nh l√† ${MyUser.my_user.name}. M√¨nh bi·∫øt b·∫°n qua s·ªë ƒëi·ªán tho·∫°i. K·∫øt b·∫°n v·ªõi m√¨nh nh√©!`);
    const [isRequestSent, setIsRequestSent] = useState(false);

    // H√†m render n·ªôi dung theo tab
    const renderContent = () => {
        switch (activeTab) {
            case "chat":
                return (
                    <div>
                        {selectedChat ? (
                            <>
                                <header className="content-header">
                                    <div className="profile">
                                        <img src={selectedChat.img} alt="Avatar" className="avatar" />
                                        <span>{selectedChat.groupName}</span>
                                    </div>
                                </header>
                                <section className="chat-section">
                                    {/* Khu v·ª±c hi·ªÉn th·ªã tin nh·∫Øn */}
                                    <div className="chat-messages">
                                        {chatMessages.length > 0 ? (
                                            chatMessages.map((msg) => (
                                                <div key={msg.id} className="chat-message">
                                                    <p>{msg.text}</p>
                                                </div>
                                            ))
                                        ) : (
                                            <p>B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi {selectedChat.groupName}</p>
                                        )}
                                    </div>
                                    {/* Thanh nh·∫≠p tin nh·∫Øn */}
                                    <div className="chat-input-container">
                                        <input
                                            type="text"
                                            className="chat-input"
                                            value={messageInput}
                                            onChange={(e) => setMessageInput(e.target.value)}
                                            onKeyDown={handleSendMessage}
                                            placeholder={`Nh·∫≠p @, tin nh·∫Øn t·ªõi ${selectedChat.groupName}`}
                                        />
                                        <div className="chat-icons">
                                            <button title="Sticker">
                                                <span>üòä</span>
                                            </button>
                                            <button title="Image">
                                                <span>üñºÔ∏è</span>
                                            </button>
                                            <button title="Attachment">
                                                <span>üìé</span>
                                            </button>
                                            <button title="Capture">
                                                <span>üì∏</span>
                                            </button>
                                            <button title="Thumbs Up">
                                                <span>üëç</span>
                                            </button>
                                        </div>
                                    </div>
                                </section>
                            </>
                        ) : (
                            <>
                                <header className="content-header">
                                    <div className="profile">
                                        <span className="profile-picture">üë§</span>
                                    </div>
                                </header>
                                <section className="welcome-section">
                                    <h1>Ch√†o m·ª´ng {MyUser.my_user.name} ƒë·∫øn v·ªõi Zolo PC!</h1>
                                    <p>
                                        Kh√°m ph√° nh·ªØng ti·ªán √≠ch h·ªó tr·ª£ l√†m vi·ªác v√† tr√≤ chuy·ªán c√πng ng∆∞·ªùi
                                        th√¢n, b·∫°n b√® ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho m√°y t√≠nh c·ªßa b·∫°n.
                                    </p>
                                </section>
                            </>
                        )}
                    </div>
                );
            case "contacts":
                return <ContactsTab />;

            default:
                return null;
        }
    };

    const handleSearchFriend = async () => {
        if (phoneNumber === MyUser.my_user.phoneNumber) {
            setError("B·∫°n kh√¥ng th·ªÉ t√¨m ki·∫øm ch√≠nh m√¨nh.");
            return;
        }

        setLoading(true);
        try {
            // Tr∆∞·ªõc khi g·ª≠i, thay th·∫ø %2B th√†nh d·∫•u +
            const formattedPhoneNumber = phoneNumber.replace(/%2B/g, '+');

            const response = await UserService.get("/searchFriend", { phoneNumber: formattedPhoneNumber });

            setUser(response); // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
            setError(null);

            setIsUserInfoModalOpen(true); // M·ªü modal th√¥ng tin ng∆∞·ªùi d√πng
        } catch (err) {
            setUser(null);
            setError("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
        } finally {
            setLoading(false);
        }
    };



    const handleAddFriend = () => {
        setIsModalOpen(true); // Open the "Add Friend" modal
    };

    const closeAllModal = () => {
        setIsModalOpen(false);
        setIsUserInfoModalOpen(false);
    };

    // H√†m g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n
    const sendFriendRequest = async () => {
        const message = {
            id: new Date().getTime().toString(),
            senderID: MyUser.my_user.id,
            receiverID: user.id,
            content: messageContent,
            isRead: false,
            sendDate: new Date().toISOString(),
            status: 'Ch·ªù ƒë·ªìng √Ω',
        };

        try {
            // X√≥a nh·ªØng l·ªùi m·ªùi c≈© tr∆∞·ªõc khi g·ª≠i l·ªùi m·ªùi m·ªõi
            await MessageService.deleteInvitation(MyUser.my_user.id, user.id);

            // G·ª≠i y√™u c·∫ßu k·∫øt b·∫°n qua MessageService
            const response = await MessageService.post('/addFriend', message);

            setIsRequestSent(true);
            setIsFriendRequestModalOpen(false);


            console.log('Message sent successfully');
        } catch (error) {
            console.error('Error sending message:', error);
        }
    };


    // Ki·ªÉm tra gi√° tr·ªã c·ªßa MyUser t·∫°i ƒë√¢y
    console.log("MyUser:", MyUser);

    if (!MyUser) {
        return <div>User not logged in</div>;
    }

    return (
        <div className="main-container">
            {/* Thanh b√™n tr√°i */}
            <nav className="sidebar-nav">
                <div className="nav-item">
                    <img
                        src="https://cdn.mhnse.com/news/photo/202105/74850_47849_2150.jpg"
                        alt="User Avatar"
                        className="avatar-img"
                    />
                </div>
                <div className="nav-item" onClick={() => setActiveTab("chat")}>
                    <i className="icon">üí¨</i>
                </div>
                <div className="nav-item" onClick={() => setActiveTab("contacts")}>
                    <i className="icon">üë•</i>
                </div>
                <div className="nav-item settings" onClick={toggleSettingsMenu}>
                    <i className="icon">‚öôÔ∏è</i>
                    {isSettingsOpen && (
                        <div className="settings-menu">
                            <ul>
                                <li className="cat-dat">Th√¥ng tin t√†i kho·∫£n</li>
                                <li className="cat-dat">C√†i ƒë·∫∑t</li>
                                <li className="cat-dat">D·ªØ li·ªáu</li>
                                <li className="cat-dat">Ng√¥n ng·ªØ</li>
                                <li className="cat-dat">H·ªó tr·ª£</li>
                                <li className="logout">ƒêƒÉng xu·∫•t</li>
                            </ul>
                        </div>
                    )}
                </div>
            </nav>

            {/* Sidebar header lu√¥n hi·ªÉn th·ªã */}
            <aside className="sidebar">
                <div className="sidebar-header">
                    <input type="text" className="search-bar" placeholder="T√¨m ki·∫øm" />
                    <button className="search-button">üîç</button>
                    <button className="action-button" title="Th√™m b·∫°n" onClick={handleAddFriend}>
                        <img
                            className="action-button-img"
                            src="https://img.icons8.com/?size=100&id=23372&format=png&color=000000"
                            alt="Add Friend"
                        />
                    </button>
                    <button className="action-button" title="T·∫°o nh√≥m">
                        <img
                            className="action-button-img"
                            src="https://img.icons8.com/?size=100&id=3734&format=png&color=000000"
                            alt="Create Group"
                        />
                    </button>
                </div>

                {/* Sidebar tabs hi·ªÉn th·ªã trong tab "chat" */}
                {activeTab === "chat" && (
                    <>
                        <div className="sidebar-tabs">
                            <button className="tab active">T·∫•t c·∫£</button>
                            <button className="tab">Ch∆∞a ƒë·ªçc</button>
                            <button className="tab">Ph√¢n lo·∫°i</button>
                        </div>
                        <div className="message-list">
                            <ul>
                                {messages.map((message) => (
                                    <MessageItem
                                        key={message.id}
                                        groupName={message.groupName}
                                        unreadCount={message.unreadCount}
                                        img={message.img}
                                        onClick={() => setSelectedChat(message)}
                                    />
                                ))}
                            </ul>
                        </div>
                    </>
                )}
                {/* Sidebar tabs hi·ªÉn th·ªã trong tab "contacts" */}
                {activeTab === "contacts" && (
                    <>
                        <div className="container-fluid">
                            <div className="d-flex align-items-start ">
                                <div className="nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                                    <button
                                        className="nav-link active d-flex align-items-center fs-6 text-dark"
                                        id="v-pills-friendlist-tab"
                                        data-bs-toggle="pill"
                                        data-bs-target="#v-pills-friendlist"
                                        type="button"
                                        role="tab"
                                        aria-controls="v-pills-friendlist"
                                        aria-selected="true"
                                    >
                                        <i className="fas fa-user-friends me-2"></i>
                                        Danh s√°ch b·∫°n b√®
                                    </button>
                                    <button
                                        className="nav-link d-flex align-items-center fs-6 text-dark"
                                        id="v-pills-grouplist-tab"
                                        data-bs-toggle="pill"
                                        data-bs-target="#v-pills-grouplist"
                                        type="button"
                                        role="tab"
                                        aria-controls="v-pills-grouplist"
                                        aria-selected="false"
                                    >
                                        <i className="fas fa-users me-2"></i>
                                        Danh s√°ch nh√≥m
                                    </button>
                                    <button
                                        className="nav-link d-flex align-items-center fs-6 text-dark"
                                        id="v-pills-friend-tab"
                                        data-bs-toggle="pill"
                                        data-bs-target="#v-pills-friend"
                                        type="button"
                                        role="tab"
                                        aria-controls="v-pills-friend"
                                        aria-selected="false"
                                    >
                                        <i className="fas fa-user-plus me-2"></i>
                                        L·ªùi m·ªùi k·∫øt b·∫°n
                                    </button>
                                    <button
                                        className="nav-link d-flex align-items-center fs-6 text-dark"
                                        id="v-pills-group-tab"
                                        data-bs-toggle="pill"
                                        data-bs-target="#v-pills-group"
                                        type="button"
                                        role="tab"
                                        aria-controls="v-pills-group"
                                        aria-selected="false"
                                    >
                                        <i className="fas fa-users me-2"></i>
                                        L·ªùi m·ªùi v√†o nh√≥m
                                    </button>
                                </div>
                            </div>
                        </div>
                    </>
                )}
            </aside>

            {/* N·ªôi dung ch√≠nh */}
            <main className="main-content">{renderContent()}</main>


            {/* ---------------------------------------------------------------------------------- */}
            {/* Add Friend Modal */}
            {isModalOpen && (
                <div className="modal">
                    <div className="modal-content">
                        <h2 className="Search-model-header">Th√™m b·∫°n</h2>
                        <div className="input-group">
                            <select className="country-code">
                                <option value="+84">(+84) <img src={flag} alt="Flag" /></option>
                                {/* Th√™m c√°c l·ª±a ch·ªçn kh√°c n·∫øu c·∫ßn */}
                            </select>
                            <input
                                className="phone-number"
                                type="text"
                                placeholder="S·ªë ƒëi·ªán tho·∫°i"
                                value={phoneNumber}
                                onChange={(e) => setPhoneNumber(e.target.value)}
                            />
                        </div>
                        {error && <div className="error">{error}</div>}

                        <div className="action-buttons">
                            <button className="search-modal" onClick={handleSearchFriend} disabled={loading}>
                                {loading ? "ƒêang t√¨m ki·∫øm..." : "T√¨m ki·∫øm"}
                            </button>
                            <button className="close-modal" onClick={() => setIsModalOpen(false)}>H·ªßy</button>
                        </div>
                    </div>
                </div>
            )}

            {isUserInfoModalOpen && user && (
                <div className="modal">
                    <div className="modal-content user-info-modal">
                        <div className="modal-header">
                            <i className="fas fa-chevron-left" onClick={() => setIsUserInfoModalOpen(false)}></i>
                            <h2>Th√¥ng tin t√†i kho·∫£n</h2>
                            <i className="fas fa-times" onClick={() => closeAllModal()}></i>
                        </div>
                        <div className="modal-body">
                            <div>
                                <img src={user.avatar || avatar_default} />
                                <h3>{user.name}</h3>
                            </div>

                            <div className="action-buttons">
                                {/* Ki·ªÉm tra n·∫øu user ƒë√≥ c√≥ trong friendIds c·ªßa my_user th√¨ kh√¥ng hi·ªÉn th·ªã n√∫t K·∫øt b·∫°n */}
                                {/* {!MyUser.my_user.friendIds.includes(user.id) && ( */}
                                <button onClick={() => setIsFriendRequestModalOpen(true)}>K·∫øt b·∫°n</button>
                                {/* )} */}
                                <button className="message-button">Nh·∫Øn tin</button>
                            </div>

                            {/* Modal y√™u c·∫ßu k·∫øt b·∫°n */}
                            {isFriendRequestModalOpen && (
                                <div className="friend-request-modal">
                                    <div className="modal-header">
                                        <h2>G·ª≠i y√™u c·∫ßu k·∫øt b·∫°n</h2>
                                        <i className="fas fa-times" onClick={() => setIsFriendRequestModalOpen(false)}></i>
                                    </div>
                                    <div>
                                        <textarea
                                            className="message-sendRequest"
                                            placeholder="Nh·∫≠p n·ªôi dung y√™u c·∫ßu k·∫øt b·∫°n"
                                            value={messageContent}
                                            onChange={(e) => setMessageContent(e.target.value)}
                                        />
                                        <div className="sendRequest-class">
                                            <button className="sendRequest-button" onClick={sendFriendRequest}>G·ª≠i y√™u c·∫ßu</button>
                                            <button className="closeSendRequest-button" onClick={() => setIsFriendRequestModalOpen(false)}>H·ªßy</button>
                                        </div>
                                    </div>
                                </div>
                            )}

                            <div className="personal-info">
                                <p>Gi·ªõi t√≠nh:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{user.sex}</p>
                                <p>Ng√†y sinh:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{user.dob}</p>
                                <p>ƒêi·ªán tho·∫°i:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{user.phoneNumber}</p>
                            </div>

                            <div className="list-container">
                                <div className="list-item">
                                    <i className="fas fa-users"></i>
                                    <span>Nh√≥m chung (0)</span>
                                </div>
                                <div className="list-item">
                                    <i className="fas fa-id-card"></i>
                                    <span>Chia s·∫ª danh thi·∫øp</span>
                                </div>
                                <div className="list-item">
                                    <i className="fas fa-ban"></i>
                                    <span>Ch·∫∑n tin nh·∫Øn v√† cu·ªôc g·ªçi</span>
                                </div>
                                <div className="list-item">
                                    <i className="fas fa-exclamation-triangle"></i>
                                    <span>B√°o x·∫•u</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {isRequestSent && (
                <div className="notification-box">
                    <p>B·∫°n ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng!</p>
                    <button className="button-confirm-send" onClick={() => setIsRequestSent(false)}>OK</button>
                </div>
            )}
        </div>
    );
};

export default MainPage;
